name: Continuous Integration Pipeline

on:
  push:
    branches:
      - master

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile

  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    env:
      LOCATION: "${{ secrets.LOCATION }}"
      REPOSITORY: "${{ vars.REPOSITORY }}"
      IMAGE_NAME:  "${{ vars.IMAGE_NAME }}"
      IMAGE_TAG: "${{ vars.IMAGE_TAG }}"
      OPENROUTER_API_KEY: "${{ secrets.OPENROUTER_API_KEY }}"
      STREAMLIT_SECRETS_TOML: "${{ secrets.STREAMLIT_SECRETS_TOML }}"
      PORT: "${{ secrets.PORT }}"

    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Create .streamlit directory
        run: mkdir -p .streamlit

      - name: Recreate secrets.toml file
        run: |
          echo "$STREAMLIT_SECRETS_TOML" > .streamlit/secrets.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir poetry==2.0.1
          poetry install --only main

      - name: Run tests of OpenAi and BigQuery connection
        run: make test_connection

      - name: Build Docker image
        run: make build

      - name: Run Docker container
        run: |
          docker run --name test_streamlit_container -d -p $PORT:$PORT \
            -e PORT=$PORT \
            -e OPENROUTER_API_KEY=$OPENROUTER_API_KEY \
            -e PROJECT_ID=$PROJECT_ID \
            $IMAGE_NAME

      - name: Wait for Streamlit app to start
        run: sleep 10

      - name: Test streamlit app
        run: curl -s -o /dev/null -w "%{http_code}" http://localhost:$PORT/ | grep 200

      - name: Save Docker image
        run: docker save $IMAGE_NAME:$IMAGE_TAG > $IMAGE_NAME.tar

      - name:  Save CI status
        env:
          GITHUB_TOKEN: "${{ secrets.GH_TOKEN_PAT }}"

        if: success()
        run: |
          echo "CI Passed!" > ci_success.txt

      - name: Upload CI status as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ci-success
          path: ci_success.txt
