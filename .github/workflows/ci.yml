name: Continuous Integration Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile

  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    env:
      LOCATION: "${{ secrets.LOCATION }}"
      REPOSITORY: "${{ vars.REPOSITORY }}"
      IMAGE_NAME:  "${{ vars.IMAGE_NAME }}"
      IMAGE_TAG: "${{ vars.IMAGE_TAG }}"
      OPENROUTER_API_KEY: "${{ secrets.OPENROUTER_API_KEY }}"
      STREAMLIT_SECRETS_TOML: "${{ secrets.STREAMLIT_SECRETS_TOML }}"
      PORT: "${{ secrets.PORT }}"
      PROJECT_ID: "${{ secrets.PROJECT_ID }}"

    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Create .streamlit directory
        run: mkdir -p .streamlit

      - name: Recreate secrets.toml file
        run: |
          echo "$STREAMLIT_SECRETS_TOML" > .streamlit/secrets.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir poetry==2.0.1
          poetry install --only main

      - name: Run tests of OpenAi and BigQuery connection
        run: make test_connection

      - name: Build Docker image
        run: make build # for command make have a look to makefile file

      - name: Run Docker container
        run: |
          docker run --name test_streamlit_container -d -p $PORT:$PORT \
            -e PORT=$PORT \
            -e OPENROUTER_API_KEY=$OPENROUTER_API_KEY \
            -e PROJECT_ID=$PROJECT_ID \
            $IMAGE_NAME

      - name: Wait for Streamlit app to start
        run: sleep 10

      - name: Test streamlit app
        run: curl -s -o /dev/null -w "%{http_code}" http://localhost:$PORT/ | grep 200

      - name: Authenticate with Google Cloud Platform
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Login to Google Artifact Registry
        run: gcloud auth configure-docker $LOCATION-docker.pkg.dev

      - name: Tag the Docker image and push to Google Artifact Registry
        run: | # for command make have a look to makefile file
          export IMAGE_FULL_TAG=$LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME:$IMAGE_TAG
          make tag push
