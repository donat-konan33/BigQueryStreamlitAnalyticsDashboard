# based on this doc https://gist.github.com/palewire/12c4b2b974ef735d22da7493cf7f4d37
name: Deploy to Prod

on:
  workflow_run:
    workflows: ["Continuous Integration Pipeline"]
    types:
      - completed

jobs:
  deploy:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    env:
      LOCATION: "${{ secrets.LOCATION }}"
      REPOSITORY: "${{ vars.REPOSITORY }}"
      IMAGE_NAME:  "${{ vars.IMAGE_NAME }}"
      IMAGE_TAG: "${{ vars.IMAGE_TAG }}"
      PROJECT_ID: "${{ secrets.PROJECT_ID }}"

    steps:
      - name: clone repository into working directory
        uses: actions/checkout@v3

      - name: Authenticate with Google Cloud Platform
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_SERVICE_ACCOUNT }}"

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Login to Google Artifact Registry
        run: gcloud auth configure-docker $LOCATION-docker.pkg.dev

      - name: Pull artifact from repository
        run: |
          echo "Artifact Pulling ongoing ..."
          export IMAGE_FULL_TAG=$LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME:$IMAGE_TAG
          docker pull $IMAGE_FULL_TAG

      - name: Configure Network (VPC, Router, NAT)
        run: |
          # checkout and create VPC if default VPC do not exist
          gcloud compute networks list --format="value(name)" | grep "^default$" || \
          gcloud compute networks create default --subnet-mode=auto

          # checkout and create router if not exist
          gcloud compute routers list --format="value(name)" --region=$LOCATION | grep "^cloud-run-router$" || \
          gcloud compute routers create cloud-run-router --network=default --region=$LOCATION

          # checkout and create NAT if not exist (allowed internet access to the cloud run app)
          gcloud compute routers nats list --router=cloud-run-router --region=$LOCATION --format="value(name)" | grep "^cloud-run-nat$" || \
          gcloud compute routers nats create cloud-run-nat \
              --router=cloud-run-router \
              --region=$LOCATION \
              --auto-allocate-nat-external-ips \
              --nat-all-subnet-ip-ranges

      - name: Create VPC Serverless Connector
        run: |
          gcloud compute networks vpc-access connectors list --region=$LOCATION --format="value(name)" | grep "^cloud-run-connector$" || \
          gcloud compute networks vpc-access connectors create cloud-run-connector \
              --network=default \
              --region=$LOCATION \
              --range=10.8.0.0/28

      - name: Deploy to Prod
        run: | # for command make have a look to makefile file
          echo "Deployment in progress..."
          export IMAGE_FULL_TAG=$LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME:$IMAGE_TAG
          gcloud run deploy weather-photovoltaic-app \
            --image=$IMAGE_FULL_TAG \
            --region=$LOCATION \
            --set-env-vars "PROJECT_ID=$PROJECT_ID" \
            --set-env-vars "OPENROUTER_API_KEY=$OPENROUTER_API_KEY"
            --allow-unauthenticated \
            --vpc-connector cloud-run-connector \
            --vpc-egress all

        env:
          # Setting an environment variable to the container
          OPENROUTER_API_KEY: "${{ secrets.OPENROUTER_API_KEY }}"
          PROJECT_ID: "${{ secrets.PROJECT_ID }}"
